/*
###COMMENTS###
Unsure if there is a payments table in the base application 
however if there isnt we can either rework the logic to accept 
invoices as "assumed paid" so the status will always be Paid or 
we can keep the table and itll have to be manuel allocations to 
the invoices on which payments correspond to which invoices.
##############
*/
table 50103 "NVR Payments"
{
    DataClassification = CustomerContent;
    Caption = 'Payments', MaxLength = 30;
    TableType = Normal;
    DrillDownPageID = "NVR Invoice List"; // Links to the Invoice List page
    LookupPageID = "NVR Invoice List"; // Enables lookup functionality
    
    fields
    {
        field(501031;PaymentID; Code[20])
        {
            DataClassification = CustomerContent;
            Caption = 'Payment ID';
            NotBlank = true;
            Editable = false;
            trigger OnValidate()
            begin
                //must be prior autogenerated and checked if it doesnt exists in the table
            end;
        }
        field(501032;InvoiceID; Code[20])
        {
            DataClassification = CustomerContent;
            Caption = 'Payment ID';
            NotBlank = true;
            Editable = true;
            TableRelation = "NVR Invoices".InvoiceID;

        }
        field(501033;"Payment Date"; Date)
        {
            DataClassification = CustomerContent;
            Caption = 'Payment Date';
            NotBlank = true;
            Editable = true;
        }
        field(501034;PaymentMethod; Enum "NVR PaymentMethods")
        {
            InitValue = 6; // Unknown
            DataClassification = CustomerContent;
            Caption = 'Payment Method';
            NotBlank = true;
            Editable = true;
        }
        field(501035;PaymentAmount; Decimal)
        {
            DataClassification = CustomerContent;
            Caption = 'Payment Amount';
            NotBlank = true;
            Editable = true;
        }
    }
    
    keys
    {
        key(PK; PaymentID)
        {
            Clustered = true;
        }
        key(FK1;InvoiceID)
        {
            Clustered = false;
        }
    }
    //Might be used later for defencive programming
    trigger OnInsert()
    begin
        
    end;
    
    trigger OnModify()
    begin
        
    end;
    
    trigger OnDelete()
    begin
        
    end;
    
    trigger OnRename()
    begin
        
    end;
}